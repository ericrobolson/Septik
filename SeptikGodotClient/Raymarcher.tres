[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://test_data/test_8x8_voxel.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "// Inspired by https://github.com/PLUkraine/raymarching-godot

shader_type canvas_item;

// Uniforms //

uniform sampler2D voxel_data;
uniform int voxel_cube_length = 4;

uniform bool use_texture;

// Camera/viewpoint 
uniform float fov = 45.0; // Vertical FOV
uniform vec3 cameraPosition = vec3(0.0, 0.0, 5.0);  // The position of the camera in world coordinates
uniform vec3 eye = vec3(0.0, 0.0, -1.0); // Where we're looking at
uniform vec3 up = vec3(0.0, 1.0, 0.0); // The 'up' direction

// Raymarching
uniform int MAX_STEPS = 250; // The max amount of steps to march
uniform float MAX_DISTANCE = 20; // The maximum depth to traverse
uniform float MINIMUM_HIT_DISTANCE = 0.00001; // The minimum depth threshold
uniform float DERIVATIVE_STEP = 0.0001;

// Phong/lighting
uniform float globalAmbient = 0.1; // How strong the ambient lighting is
uniform float globalDiffuse = 1.0; // How strong the diffuse lighting is
uniform float globalSpecular = 1.0; // How strong the specular lighting is
uniform float globalSpecularExponent = 63.0; // How focused the specular 'shine' is
uniform vec3 lightPos = vec3(-2.0, 5.0, 3.0); // The position of the light
uniform vec3 lightColor = vec3(0.9, 0.9, 0.68); // The light's color
uniform vec3 ambientColor = vec3(1.0, 1.0, 1.0); // The ambient light's color

// End uniforms // 

// Functionality //


/*
int closestIndex(float pos, int row_size, float row_pos, float voxel_size){
	float min_index_pos = row_pos;
	float max_index_pos = float(row_size) * voxel_size + row_pos;
	
	// If position < min_voxel pos, use smallest index
	if (pos < min_index_pos){
		return 0;
	} 
	// else if position > max_voxel pos, use largest index
	else if (max_index_pos < pos){
		return row_size - 1;
	}
	
	// Map the position to the index range
	pos -= row_pos;
	pos *= voxel_size;
	
	return int(pos);
}

ivec2 voxel_index_to_texture_index(int x, int y, int z, int row_len){
	
	
	//TODO!!
	return ivec2(0);
}

vec3 voxel_index_to_position(int x, int y, int z, vec3 voxelOffset, float voxel_size){
	vec3 p = vec3(float(x), float(y), float(z));
	
	p *= voxel_size;
	p += voxelOffset;
	
	return p;
}

float sdCube(vec3 position, vec3 boxPos, float boxSize){	
	vec3 q = abs(position) - boxPos;
  	return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - boxSize;
	return dot(position, normalize(boxPos)) + boxSize;
	//return sdSphere(position, boxPos, boxSize);
}

float sdPlane( vec3 p, vec3 n, float h )
{
  // n must be normalized
  return dot(p,n) + h;
}


float sdVoxels(vec3 position){		
	float len = 0.0;
	
	vec3 voxelOffset = vec3(0.0, 0.0, 0.0);
	float voxel_size = 0.3;
		
	// This is a bad implementation, but is mainly to get a dumb version working
	int x,y,z = 0;
		
	float min_dist = 999999999999999999.0;
		
	bool use_dumb_code = false;	
	if (!use_dumb_code){
		// Pseudocode:		
		// If position.x < min_voxel xpos, use smallest xindex
		// elIf position.x > max_voxel xpos, use largest xindex
		int x_index = closestIndex(position.x, voxel_cube_length, voxelOffset.x, voxel_size);
		int y_index = closestIndex(position.y, voxel_cube_length, voxelOffset.y, voxel_size);
		int z_index = closestIndex(position.z, voxel_cube_length, voxelOffset.z, voxel_size);
				
		// Then, map your voxel index to the tex xy indexes
		ivec2 tex_index = voxel_index_to_texture_index(x_index, y_index, z_index, voxel_cube_length);
		vec4 voxel_color_data = texelFetch(voxel_data, tex_index, 0);
		bool voxelActive = 0.0 < voxel_color_data.a;
		
		if (x_index % 2 == 0){
		//	voxelActive = false;
		}
		
		if (voxelActive){
			vec3 voxelPosition = voxel_index_to_position(x_index, y_index, z_index, voxelOffset, voxel_size);
			
			vec3 voxelBoxSize = vec3(1.0);
			voxelBoxSize.x *= 2.0;
			
			voxelBoxSize *= voxel_size;
			
			vec3 vsize = vec3(voxel_size / 3.0);
			
			return sdRoundBox(position - voxelPosition, voxelBoxSize, 0.04);
			
			//return sdRoundBox(position - voxelPosition, voxelBoxSize, 0.03);
			
			return sdBox(position - voxelPosition, vsize);			
		}
		
		// If active, return the length
		// Else, continue marching to get the next active voxel		
	}	
	// OLD CODE - DUMB IMPLEMENTATION
	else {	
		float prevMinDist = 0.0;
		bool prevMinDistSet = false;
		
		for (int texx = 0; texx < 8; texx++){
			for (int texy = 0; texy < 8; texy++){				
				vec3 voxelPos = vec3(float(x), float(y), float(z));
				voxelPos *= voxel_size;
				voxelPos += voxelOffset;
					
				if (prevMinDistSet == false){
					prevMinDistSet = true;
					prevMinDist = length(position - voxelPos);
				} 
				
				float currentDist = length(position - voxelPos);
				
				if (currentDist <= prevMinDist){
					prevMinDist = currentDist;							
								
					ivec2 texCoords = ivec2(texx, texy);
					
					vec4 colors = texelFetch(voxel_data, texCoords, 0);
					
					// alpha represents the voxel's active bit
					bool voxelActive = 0.0 < colors.a;
					
					// Only draw if true
					if (voxelActive == true){							
						//float length_voxel = sdSphere(position, voxelPos, voxel_size);		
						float length_voxel = length(position - voxelPos) - voxel_size;
					
						if (length_voxel < min_dist){
							min_dist = length_voxel;
							
						}
					}
				}
				
				// Increase x,y,z
				x += 1;
				if (voxel_cube_length <= x){
					x = 0;
					y += 1;
					
					if (voxel_cube_length <= y){
						y = 0;
						z += 1;
					}
				}
			}
		}
	}
		
	return min_dist;
}
*/


float dot2_vec2(in vec2 v) {
	return dot(v,v);
}

float dot2_vec3(in vec3 v) {
	return dot(v,v);
}

float ndot(in vec2 a, in vec2 b) {
	return a.x * b.x - a.y * b.y;
}


// Signed distance function for spheres
// Additional SDF's: https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
float sdSphere(vec3 position, vec3 center, float radius){
	return length(center - position) - radius;
}

float sdBox( vec3 position, vec3 b )
{
  vec3 q = abs(position) - b;
  return length(max(q,0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}


float sdRoundBox( vec3 p, vec3 b, float r )
{		
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
}

float sdTorus(vec3 position, vec2 torus){
	vec2 q = vec2(length(position.xz) - torus.x, position.y);
	return length(q) - torus.y;
}

float sdfOpUnion(float d1, float d2){
	return min (d1, d2);
}

float sdfOpSubtraction(float d1, float d2){
	return max(-d1, d2);
}


float sdfOpIntersection(float d1, float d2){
	return max(d1, d2);
}


float sdfOpSmoothUnion(float d1, float d2, float k){
	float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}

float sdfOpSmoothSubtraction(float d1, float d2, float k){
	float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}


float sdfOpSmoothIntersection(float d1, float d2, float k){
	float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h);
}

// Signed distance function given a position
float sdf(vec3 pos){			
	//return sdTexture(pos);
	//return sdVoxels(pos);
	
	return sdfOpSmoothUnion(sdTorus(pos, vec2(1.0, 0.4)), sdSphere(pos, vec3(0), 1), 0.3);
	
	return sdTorus(pos, vec2(1.0, 0.4));
	
	return sdSphere(pos, vec3(0), 1);
}

// Given a resolution and a UV, calculate the ray direction
vec3 getRayDirection(vec2 resolution, vec2 uv){
	float aspect = resolution.x / resolution.y;
	float fov2 = radians(fov) / 2.0;
	
	// Normalize coordinates from [0, 1] to [-1, 1]
	vec2 screenCoordinates = (uv - 0.5) * 2.0;
	screenCoordinates.x *= aspect;
	screenCoordinates.y = -screenCoordinates.y; // Flip y axis, as in godot it goes from top to bottom
	
	// Get the contributions of the up and right vectors
	vec2 offsets = screenCoordinates * tan(fov2);
	
	// Compute the 3 orthogonal unit vectors
	vec3 rayFront = normalize(eye);
	vec3 rayRight = normalize(cross(rayFront, normalize(up)));
	vec3 rayUp = cross(rayRight, rayFront);
	vec3 rayDir = rayFront + rayRight * offsets.x + rayUp * offsets.y;
	
	return normalize(rayDir);	
}

vec3 estimateNormal(vec3 position){
	return normalize(vec3(
		sdf(vec3(position.x + DERIVATIVE_STEP, position.y, position.z)) - sdf(vec3(position.x - DERIVATIVE_STEP, position.y, position.z)),
		sdf(vec3(position.x, position.y + DERIVATIVE_STEP, position.z)) - sdf(vec3(position.x, position.y  - DERIVATIVE_STEP, position.z)),
		sdf(vec3(position.x, position.y, position.z + DERIVATIVE_STEP)) - sdf(vec3(position.x, position.y, position.z - DERIVATIVE_STEP))
	));
}
// End functionality // 


// Lighting //

vec3 blinnPhong(
	vec3 position
	, vec3 lightPosition
	, vec3 ambientCol
	, vec3 lightCol
	, float ambientCoeff
	, float diffuseCoeff
	, float specularCoeff
	, float specularExponent
	){
	vec3 normal = estimateNormal(position);
	vec3 toEye = normalize(eye - position);
	vec3 toLight = normalize(lightPosition - position);
	vec3 reflection = reflect(-toLight, normal);
	
	vec3 ambientFactor = ambientCol * ambientCoeff;
	vec3 diffuseFactor = diffuseCoeff * lightCol * max(0.0, dot(normal, toLight));
	vec3 specularFactor = lightCol * pow(max(0.0, dot(toEye, reflection)), specularExponent) * specularCoeff;
	
	return ambientFactor + diffuseFactor + specularFactor;
}


// End Lighting //


// Given a direction, march forward
vec3 raymarch(vec3 rayDirection){
	vec3 hitColor = vec3(1.0, 1.0, 1.0);
	vec3 missColor = vec3(0.0, 0.0, 0.0);
	
	float depth = 0.0;
	for (int i = 0; depth < MAX_DISTANCE && i < MAX_STEPS; ++i){
		vec3 position = cameraPosition + rayDirection * depth;
		float dist = sdf(position);
		if (dist < MINIMUM_HIT_DISTANCE) {				
			    return blinnPhong(
					position
					, lightPos
					, ambientColor
					, lightColor
					, globalAmbient
					, globalDiffuse
					, globalSpecular
					, globalSpecularExponent
				);
		}
		
		depth += dist;
	}
	
	return missColor;
}

// The actual shader
void fragment(){	
	vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;

	vec3 rayDir = getRayDirection(resolution, UV);
	
	vec3 raymarchColor = raymarch(rayDir);
	
	// Show direction on screen as a color	
	COLOR = vec4(raymarchColor, 1.0);
}"

[resource]
shader = SubResource( 1 )
shader_param/voxel_cube_length = 5
shader_param/use_texture = false
shader_param/fov = 45.0
shader_param/cameraPosition = Vector3( 0.089, 2.123, 3.221 )
shader_param/eye = Vector3( 0, -0.561, -1 )
shader_param/up = Vector3( 0, 1, 0 )
shader_param/MAX_STEPS = 275
shader_param/MAX_DISTANCE = 20.0
shader_param/MINIMUM_HIT_DISTANCE = 1e-05
shader_param/DERIVATIVE_STEP = 0.0001
shader_param/globalAmbient = 0.1
shader_param/globalDiffuse = 1.0
shader_param/globalSpecular = 1.0
shader_param/globalSpecularExponent = 63.0
shader_param/lightPos = Vector3( -1.014, 5, 3.441 )
shader_param/lightColor = Vector3( 0.457, 0.645, 0.723 )
shader_param/ambientColor = Vector3( 1, 0.783, 1 )
shader_param/voxel_data = ExtResource( 1 )
